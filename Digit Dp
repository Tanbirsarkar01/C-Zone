#include <bits/stdc++.h>
using namespace std;

#define int long long

// index, tight, count
int dp[20][2][20];

int solve(string &s, int idx, int tight, int cnt) {
    if (idx == (int)s.size()) return cnt;

    if (dp[idx][tight][cnt] != -1) return dp[idx][tight][cnt];

    int limit = (tight == 1 ? s[idx] - '0' : 9);
    int ans = 0;
    for (int i = 0; i <= limit; i++) {
        int updateCnt = cnt + (i == 3 ? 1 : 0);
        int newTight = (tight & (i == (s[idx] - '0')));
        ans += solve(s, idx + 1, newTight, updateCnt);
    }

    return dp[idx][tight][cnt] = ans;
}

int32_t main() {
    int l, r;
    cin >> l >> r;

    memset(dp, -1, sizeof(dp));
    string ri = to_string(r);
    int rightAns = solve(ri, 0, 1, 0);

    memset(dp, -1, sizeof(dp));
    string le = to_string(l - 1);  // l-1 is required to make range inclusive
    int leftAns = solve(le, 0, 1, 0);

    cout << rightAns - leftAns << endl;
    return 0;
}
